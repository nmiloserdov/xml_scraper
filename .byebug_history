continue
c
client_message
client_mesage
c
message
exit
message
c
title
exit
@category.books.each { |b| puts b.title }
@category.books.each { |b| puts b.name }
@category.books.count
@category.books
@category
c
с
c
@message.empty?
exit
@message.nil?
@message
c
@message
exit
c
/find
c
exit
Book.first.id
Book.first.i
Book.find(random)
random
c
self.countries.first.name
self.countries.first
self.countries
self.countries.fisrt
self.countries
self.country
self
c
с
c
book
c
books[1c]
books[1]
books.first
books.fiest
books.find_by(book_id: 1)
books.find(1)
books.find_by(1)
books
books     = @category.books
c
books
c
books.count
books.size
books     = @category.books
books     = @category.book
books
c
Category.find_by(name: name).books
Category.find_by(name: name)
c
Category.find_by(name: name)
name
exit
"hello".capitalizeex
"hello".capitalize
"hello".normalize
Category.find_by(name: "Роман")
Category.find_by(name: "роман")
Category
name
Category.find_by(name: name)
name
exit
extract_category(message).stripex
extract_category(message).strip
extract_category(message)
message
exit
@category
category = Category.find_by(name: @category)
category = Category.find_by(name: category)
category = find_by(name: category)
Book.find_by(category: @category)
books.all
books
books     = Book.where(category: @category)
books
book
ищщл
c
exit
@category
exit
searcher.find_book
searcher
searcher.find_book
searcher
book
exit
country.book
country.books
country.book
country.book.size
country.book
country.book.count
country.book
country.boo
country
exit
country.booksexit
country.books
country.book
country.books
country
c
exit
Country.all
Country.all.sizee
Country.all
Country
c
get_message[:categories, categories]
categories
c
client_message
exit
test
c
exit
get_message(:greet, "Test")
get_message(:start, "Test")
infos
test
c
exit
ext
infos
exit
info
test
exit
test
get_message(:greet, "Nick")
get_message(:greet, nil)
get_message(:greet)
test
exit
self.book.categories
self.book.category
exit
books
exit
err_file
exit
BookHunter.root
exit
BookHunter.root
BookHunter
exit
YAML.load_file("../tmp/books.yml")
YAML.load_file("../../../../tmp/books.yml")
YAML.load_file("../../../tmp/books.yml")
YAML.load_file("../../tmp/books.yml")
YAML.load_file("./tmp/books.yml")
YAML.load_file("../tmp/books.yml")
YAML.load_file("#{File.dirname __FILE__ }/tmp/books.yml")
YAML.load_file("#{File.dirname __FILE__ }/../tmp/books.yml")
YAML.load_file("#{File.dirname __FILE__ }/../../tmp/books.yml")
YAML.load_file("#{File.dirname __FILE__ }/../tmp/books.yml")
YAML.load_file("#{File.dirname __FILE__ }/..tmp/books.yml")
("#{File.dirname __FILE__ }/../tmp/books.yml")
("#{File.dirname __FILE__ }/tmp/books.yml")
YAML.load_file("#{File.dirname __FILE__ }/tmp/books.yml")
YAML.load_file("#{File.dir_name __FILE__ }/tmp/books.yml")
YAML.load_file("#{BookHunter}/tmp/books.yml")
YAML.load_file("#{root}/tmp/books.yml")
YAML.load_file("#{@root}/tmp/books.yml")
YAML.load_file("#{BookHunter.root}/tmp/books.yml")
YAML.load_file("#{Rails.root}/tmp/books.yml")
err_file
